What is gRPC?
gRPC is a modern, open source remote procedure call (RPC) framework that can run anywhere. It enables client and server applications to communicate
 transparently, and makes it easier to build connected systems.

Read the longer Motivation & Design Principles post for background on why we created gRPC.  // Link: https://grpc.io/docs/what-is-grpc/faq/

What does gRPC stand for?
gRPC Remote Procedure Calls, of course!

Why would I want to use gRPC?
The main usage scenarios:
Low latency, highly scalable, distributed systems.
Developing mobile clients which are communicating to a cloud server.
Designing a new protocol that needs to be accurate, efficient and language independent.
Layered design to enable extension eg. authentication, load balancing, logging and monitoring etc.

Who’s using this and why?
gRPC is a Cloud Native Computing Foundation (CNCF) project.

Google has been using a lot of the underlying technologies and concepts in gRPC for a long time. The current implementation is being used in several 
of Google’s cloud products and Google externally facing APIs. It is also being used by Square, Netflix, CoreOS, Docker, CockroachDB, Cisco, Juniper 
Networks and many other organizations and individuals.



Remote Procedure Call (RPC)
Link: https://web.cs.wpi.edu/~cs4514/b98/week8-rpc/week8-rpc.html  ,  https://www.geeksforgeeks.org/remote-procedure-call-rpc-in-operating-system/

Remote Procedure Call (RPC) provides a different paradigm for accessing network services. Instead of accessing remote services by sending and receiving 
messages, a client invokes services by making a local procedure call. The local procedure hides the details of the network communication.

When making a remote procedure call:
1. The calling environment is suspended, procedure parameters are transferred across the network to the environment where the procedure is to execute, and 
the procedure is executed there.
2. When the procedure finishes and produces its results, its results are transferred back to the calling environment, where execution resumes as if 
returning from a regular procedure call.

The main goal of RPC is to hide the existence of the network from a program. As a result, RPC doesn't quite fit into the OSI model:
1. The message-passing nature of network communication is hidden from the user. The user doesn't first open a connection, read and write data, and then close 
the connection. Indeed, a client often doesn not even know they are using the network!
2. RPC often omits many of the protocol layers to improve performance. Even a small performance improvement is important because a program may invoke RPCs 
often. For example, on (diskless) Sun workstations, every file access is made via an RPC.

RPC is especially well suited for client-server (e.g., query-response) interaction in which the flow of control alternates between the caller and callee. 
Conceptually, the client and server do not both execute at the same time. Instead, the thread of execution jumps from the caller to the callee and then back 
again.

The following steps take place during an RPC:

1. A client invokes a client stub procedure, passing parameters in the usual way. The client stub resides within the client's own address space.
2. The client stub marshalls the parameters into a message. Marshalling includes converting the representation of the parameters into a standard format, and 
copying each parameter into the message.
3. The client stub passes the message to the transport layer, which sends it to the remote server machine.
4. On the server, the transport layer passes the message to a server stub, which demarshalls the parameters and calls the desired server routine using the 
regular procedure call mechanism.
5. When the server procedure completes, it returns to the server stub (e.g., via a normal procedure call return), which marshalls the return values into a 
message. The server stub then hands the message to the transport layer.
6. The transport layer sends the result message back to the client transport layer, which hands the message back to the client stub.
7. The client stub demarshalls the return parameters and execution returns to the caller.

RPC Issues
Issues that must be addressed:

Marshalling:
Parameters must be marshalled into a standard representation.
Parameters consist of simple types (e.g., integers) and compound types (e.g., C structures or Pascal records). Moreover, because each type has its own 
representation, the types of the various parameters must be known to the modules that actually do the conversion. For example, 4 bytes of characters 
would be uninterpreted, while a 4-byte integer may need to the order of its bytes reversed.

Semantics:
Call-by-reference not possible: the client and server don't share an address space. That is, addresses referenced by the server correspond to data residing in the client's address space.
One approach is to simulate call-by-reference using copy-restore. In copy-restore, call-by-reference parameters are handled by sending a copy of the 
referenced data structure to the server, and on return replacing the client's copy with that modified by the server.
However, copy-restore doesn't work in all cases. For instance, if the same argument is passed twice, two copies will be made, and references through one 
parameter only changes one of the copies.

Binding:
How does the client know who to call, and where the service resides?
The most flexible solution is to use dynamic binding and find the server at run time when the RPC is first made. The first time the client stub is invoked, 
it contacts a name server to determine the transport address at which the server resides.

